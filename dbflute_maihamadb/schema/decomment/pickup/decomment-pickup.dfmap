map:{
    ; formatVersion = 1.0
    ; pickupDatetime = 2017-12-31T23:14:09.482
    ; decoMap = map:{
        ; tableList = list:{
            ; map:{
                ; tableName = MEMBER
                ; propertyList = list:{
                    ; map:{
                        ; decomment = piece 1
piece 2
piece 3
                        ; databaseComment = 会員のプロフィールやアカウントなどの基本情報を保持する。
基本的に物理削除はなく、退会したらステータスが退会会員になる。
ライフサイクルやカテゴリの違う会員情報は、one-to-oneなどの関連テーブルにて。
                        ; pieceCode = 3a31a447
                        ; pieceOwner = yuto
                        ; pieceDatetime = 2017-12-31T23:14:02.050
                        ; previousPieceList = list:{
                            ; 88fa649c
                            ; b8f3e958
                            ; bac9263b
                            ; 576cca17
                        }
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; yuto
                            ; tominaga
                            ; jflute
                            ; ryohei
                        }
                    }
                }
                ; columnList = list:{
                    ; map:{
                        ; columnName = MEMBER_ID
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 連番として自動採番される。会員のIDだけに限らず採番方法はDBMS次第。
基本はMySQLが多いので問題になることはほとんどない。

decomment \;
                                ; databaseComment = 連番として自動採番される。会員IDだけに限らず採番方法はDBMS次第。
                                ; pieceCode = d941f67
                                ; pieceOwner = yuto
                                ; pieceDatetime = 2017-12-30T20:55:13.110
                                ; previousPieceList = list:{
                                    ; fb192f28
                                }
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; tominaga
                                    ; ryohei
                                    ; yuto
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = MEMBER_NAME
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 会員のフルネームの名称。
苗字と名前を分けて管理することが多いが、ここでは単純は単純にでひとまとめ。
&lt\;br&gt\;によるDBコメントとのコンフリクトを直した。
                                ; databaseComment = 会員のフルネームの名称。
苗字と名前を分けて管理することが多いが、ここでは単純にひとまとめ。
                                ; pieceCode = 32ca67b5
                                ; pieceOwner = jflute
                                ; pieceDatetime = 2017-12-24T23:17:41.230
                                ; previousPieceList = list:{
                                    ; 28e001f
                                }
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; jflute
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = BIRTHDATE
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 必須項目ではないので、このデータがない会員もいる。
生年月日スーパーマン！私は生まれたら空を飛ぶ、とりゃー！
                                ; databaseComment = 必須項目ではないので、このデータがない会員もいる。
                                ; pieceCode = 1e333dc5
                                ; pieceOwner = jflute
                                ; pieceDatetime = 2017-12-24T23:18:33.111
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; jflute
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = MEMBER_ACCOUNT
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = ログインIDとして利用する。
昨今メールアドレスをログインIDとすることが多いので、あまり見かけないかも!?

おかしいなぁ

おかしいなぁ

おかしいなぁ...

治った...
                                ; databaseComment = ログインIDとして利用する。
昨今メールアドレスをログインIDとすることが多いので、あまり見かけないかも!?
                                ; pieceCode = ea050467
                                ; pieceOwner = yuto
                                ; pieceDatetime = 2017-12-30T21:37:00.902
                                ; previousPieceList = list:{
                                    ; a273b0e8
                                }
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; yuto
                                }
                            }
                        }
                    }
                }
            }
            ; map:{
                ; tableName = MEMBER_SECURITY
                ; propertyList = list:{
                    ; map:{
                        ; decomment = 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある。
                        ; databaseComment = 会員とは&nbsp\;one-to-one&nbsp\;で、会員一人につき必ず一つのセキュリティ情報がある
                        ; pieceCode = 339d5b82
                        ; pieceOwner = ryohei
                        ; pieceDatetime = 2017-12-29T17:33:39.977
                        ; previousPieceList = list:{
                            ; 36b237b9
                        }
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; tominaga
                            ; ryohei
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = MEMBER_ADDRESS
                ; propertyList = list:{
                    ; map:{
                        ; decomment = 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的には one-to-many だが、業務的な定型条件で one-to-one になる。このような構造を「業務的one-to-one」と呼ぶ！
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な) &quot\;1 : 0..1&quot\; である。
かぼすはかぼさない。いやかぼす♪。💕

いけるんですね〜 by かぼす
                        ; databaseComment = 会員の住所に関する情報で、同時に有効期間ごとに履歴管理されている。
会員を基点に考えた場合、構造的には&nbsp\;one-to-many&nbsp\;だが、業務的な定型条件で&nbsp\;one-to-one&nbsp\;になる。このような構造を「業務的one-to-one」と呼ぶ！
有効期間は隙間なく埋められるが、ここでは住所情報のない会員も存在し、厳密には(業務的な)&nbsp\;"1&nbsp\;:&nbsp\;0..1"&nbsp\;である。
                        ; pieceCode = e7633359
                        ; pieceOwner = yuto
                        ; pieceDatetime = 2017-12-30T20:53:51.622
                        ; previousPieceList = list:{
                            ; 630b8ac4
                        }
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; jflute
                            ; yuto
                        }
                    }
                }
                ; columnList = list:{
                    ; map:{
                        ; columnName = REGISTER_DATETIME
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 登録日時
                                ; databaseComment = null
                                ; pieceCode = 72557ed2
                                ; pieceOwner = ryohei
                                ; pieceDatetime = 2017-12-29T17:00:08.456
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; ryohei
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = UPDATE_DATETIME
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 更新日時
                                ; databaseComment = null
                                ; pieceCode = 44520528
                                ; pieceOwner = tominaga
                                ; pieceDatetime = 2017-12-29T18:13:41.393
                                ; previousPieceList = list:{
                                    ; 130ff842
                                    ; dd20d71
                                }
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; tominaga
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = REGISTER_USER
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 登録ユーザー
                                ; databaseComment = null
                                ; pieceCode = 157f01a2
                                ; pieceOwner = ryohei
                                ; pieceDatetime = 2017-12-29T17:30:43.928
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; ryohei
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = UPDATE_USER
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 更新会員
                                ; databaseComment = null
                                ; pieceCode = 6a3761c0
                                ; pieceOwner = tominaga
                                ; pieceDatetime = 2017-12-29T18:04:37.870
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; tominaga
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = VERSION_NO
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = バージョンNo
同時更新をされないようにします。
                                ; databaseComment = null
                                ; pieceCode = 7a4fbf4e
                                ; pieceOwner = tominaga
                                ; pieceDatetime = 2017-12-29T18:05:24.481
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; tominaga
                                }
                            }
                        }
                    }
                }
            }
            ; map:{
                ; tableName = PRODUCT
                ; propertyList = list:{
                    ; map:{
                        ; decomment = 商品のテーブル。定価とか品番とかを持つ。

SQLとかかいてみたりするコメントとかありそう
\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=
-- 商品と商品カテゴリーを一緒に取得
select * from PRODUCT p
  inner join PRODUCT_CATEGORY pc
     on p.PRODUCT_ID \= pc.PRODUCT_ID\;

-- 商品と商品カテゴリーを一緒に取得
select * from PRODUCT p
  inner join PRODUCT_CATEGORY pc
     on p.PRODUCT_ID \= pc.PRODUCT_ID\;

select * from PRODUCT p
  inner join PRODUCT_CATEGORY pc
     on p.PRODUCT_ID \= pc.PRODUCT_ID\;
select * from PRODUCT p
  inner join PRODUCT_CATEGORY pc
     on p.PRODUCT_ID \= pc.PRODUCT_ID\;


-- 商品と商品カテゴリーを一緒に取得
select * from PRODUCT p
  inner join PRODUCT_CATEGORY pc
     on p.PRODUCT_ID \= pc.PRODUCT_ID\;
\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=


2017/12/29 ＼(^o^)／
2016/12/29 カラム追加
2015/12/29 作成


多分DBFluteハンズオンsection3くらいからよく使うテーブル
http://dbflute.seasar.org/ja/tutorial/handson/section03.html
                        ; databaseComment = null
                        ; pieceCode = 30d4e5da
                        ; pieceOwner = ryohei
                        ; pieceDatetime = 2017-12-29T17:43:08.524
                        ; previousPieceList = list:{
                            ; 30b1dfc0
                        }
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; ryohei
                        }
                    }
                }
                ; columnList = list:{
                    ; map:{
                        ; columnName = PRODUCT_STATUS_CODE
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 商品のステータスを示すよ！
                                ; databaseComment = null
                                ; pieceCode = 4fc34ac2
                                ; pieceOwner = ryohei
                                ; pieceDatetime = 2017-12-29T16:56:21.571
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; ryohei
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = REGULAR_PRICE
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 商品の定価を示すよ！税抜を想定している。
                                ; databaseComment = null
                                ; pieceCode = 319b3bf5
                                ; pieceOwner = ryohei
                                ; pieceDatetime = 2017-12-29T16:57:03.564
                                ; previousPieceList = list:{
                                    ; 615f5c2d
                                }
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; ryohei
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = PRODUCT_CATEGORY_CODE
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 商品のカテゴリーを示すコードを入れるカラム
                                ; databaseComment = null
                                ; pieceCode = 31d6aa5f
                                ; pieceOwner = ryohei
                                ; pieceDatetime = 2017-12-29T16:57:24.775
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; ryohei
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = UPDATE_USER
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 更新したユーザー
                                ; databaseComment = null
                                ; pieceCode = 5a4b6967
                                ; pieceOwner = tominaga
                                ; pieceDatetime = 2017-12-29T17:49:02.999
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; tominaga
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = REGISTER_DATETIME
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 商品の登録日時ですよ。
                                ; databaseComment = null
                                ; pieceCode = 5712f64b
                                ; pieceOwner = ryohei
                                ; pieceDatetime = 2017-12-29T17:31:53.175
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; ryohei
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = PRODUCT_HANDLE_CODE
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = これだけは書いておこう、商品を識別する業務上のコード。よく品番とか言うかもしれませんねぇ...
こんなカラムあったっけ？！
                                ; databaseComment = これだけは書いておこう、商品を識別する業務上のコード。よく品番とか言うかもしれませんねぇ...
                                ; pieceCode = 3fe928b6
                                ; pieceOwner = ryohei
                                ; pieceDatetime = 2017-12-29T17:36:07.108
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; ryohei
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = REGISTER_USER
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = piece test1
piece test2
piece test3
piece test4
                                ; databaseComment = null
                                ; pieceCode = 7f66ef9
                                ; pieceOwner = yuto
                                ; pieceDatetime = 2017-12-31T20:32:26.116
                                ; previousPieceList = list:{
                                    ; a4585c02
                                    ; d265175a
                                    ; 78056264
                                }
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; yuto
                                }
                            }
                        }
                    }
                }
            }
            ; map:{
                ; tableName = MEMBER_LOGIN
                ; propertyList = list:{
                    ; map:{
                        ; decomment = ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには、登録する人もプログラムもはっきりしているので、(紙面の都合上もあって)ここでは共通カラムは省略している。
★ちょっとこのテーブル、デコメントした上でデータベースコメントも修正しちゃって、コンフリクトさせよう。
                        ; databaseComment = ログインするたびに登録されるログイン履歴。
登録されたら更新されるも削除されることもない。さらには、登録する人もプログラムもはっきりしているので、(紙面の都合上もあって)ここでは共通カラムは省略している。
                        ; pieceCode = 260b4936
                        ; pieceOwner = jflute
                        ; pieceDatetime = 2017-12-29T17:00:14.044
                        ; previousPieceList = list:{}
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; jflute
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = WITHDRAWAL_REASON
                ; propertyList = list:{}
                ; columnList = list:{
                    ; map:{
                        ; columnName = DISPLAY_ORDER
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 表示順。一覧表示のときとかに使うと思う。
                                ; databaseComment = null
                                ; pieceCode = 6f5be9be
                                ; pieceOwner = ryohei
                                ; pieceDatetime = 2017-12-29T16:58:17.872
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; ryohei
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = WITHDRAWAL_REASON_CODE
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 退会理由コード！3文字で示すのだ。
                                ; databaseComment = null
                                ; pieceCode = 2a1d2270
                                ; pieceOwner = ryohei
                                ; pieceDatetime = 2017-12-29T17:32:55.296
                                ; previousPieceList = list:{
                                    ; 34592a23
                                }
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; ryohei
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = WITHDRAWAL_REASON_TEXT
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 退会理由の内容。
テキスト形式なので目いっぱい書けるが、そうするとUI側できれいに見せるのが大変でしょうね。
それをきれいに見せるのがデザイナーの腕の見せ所ですね。。。。。

コンフリクトを解消しました
                                ; databaseComment = 退会理由の内容。
テキスト形式なので目いっぱい書けるが、そうするとUI側できれいに見せるのが大変でしょうね。
                                ; pieceCode = 45c3e9dc
                                ; pieceOwner = tominaga
                                ; pieceDatetime = 2017-12-29T19:00:59.799
                                ; previousPieceList = list:{
                                    ; 6a6e2f98
                                    ; 52fd85c9
                                    ; 929de3c
                                }
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; tominaga
                                }
                            }
                        }
                    }
                }
            }
            ; map:{
                ; tableName = MEMBER_FOLLOWING
                ; propertyList = list:{
                    ; map:{
                        ; decomment = とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴(まじで!?)が閲覧できる。
                        ; databaseComment = とある会員が他の会員をフォローできる。すると、フォローした会員の購入履歴が閲覧できる。
                        ; pieceCode = 1cde89d9
                        ; pieceOwner = jflute
                        ; pieceDatetime = 2017-12-29T16:57:34.667
                        ; previousPieceList = list:{}
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; jflute
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = PRODUCT_CATEGORY
                ; propertyList = list:{
                    ; map:{
                        ; decomment = 商品のカテゴリを表現するマスタ。自己参照FKの階層になっている。

URLとかかけないのかなぁ...

http://localhost:8926/api/document/maihamadb/schemahtml/#member_service

リンクが押せると最高なんだけどね 笑
                        ; databaseComment = 商品のカテゴリを表現するマスタ。自己参照FKの階層になっている。
                        ; pieceCode = 12a8c2b7
                        ; pieceOwner = yuto
                        ; pieceDatetime = 2017-12-30T20:50:33.293
                        ; previousPieceList = list:{
                            ; 752f9d50
                        }
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; yuto
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = MEMBER_SERVICE
                ; propertyList = list:{
                    ; map:{
                        ; decomment = 会員のサービス情報（ポイントサービスなど）。
テストケースのために、あえて統一性を崩してユニーク制約経由の one-to-one を表現している。

小文字に変更されないかテストをする
そういえば、シングルクォーテーションとかあっても大丈夫だよね？→ &#x27\;
というか絵文字は？💖
                        ; databaseComment = 会員のサービス情報（ポイントサービスなど）。
テストケースのために、あえて統一性を崩してユニーク制約経由の&nbsp\;one-to-one&nbsp\;を表現している。
                        ; pieceCode = 767ffa1f
                        ; pieceOwner = jflute
                        ; pieceDatetime = 2017-12-30T13:57:43.891
                        ; previousPieceList = list:{
                            ; ab95e92
                        }
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; tominaga
                            ; jflute
                        }
                    }
                }
                ; columnList = list:{
                    ; map:{
                        ; columnName = SERVICE_POINT_COUNT
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 明らかにおかしいカラム名
                                ; databaseComment = 購入したら増えて使ったら減る。
                                ; pieceCode = 4bc473be
                                ; pieceOwner = yuto
                                ; pieceDatetime = 2017-12-30T13:51:58.786
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; yuto
                                }
                            }
                        }
                    }
                    ; map:{
                        ; columnName = MEMBER_SERVICE_ID
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 独立した主キーとなるが、実質的に会員IDとは one-to-one である。
                                ; databaseComment = 独立した主キーとなるが、実質的に会員IDとは&nbsp\;one-to-one&nbsp\;である。
                                ; pieceCode = 25a8d9e5
                                ; pieceOwner = tominaga
                                ; pieceDatetime = 2017-12-29T17:54:35.653
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; tominaga
                                }
                            }
                        }
                    }
                }
            }
            ; map:{
                ; tableName = MEMBER_WITHDRAWAL
                ; propertyList = list:{
                    ; map:{
                        ; decomment = 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在し、&quot\;1 : 0..1&quot\; のパターンの one-to-one である。
共通カラムがあってバージョンNOがないパターン。
基本的に更新は入らないが、重要なデータなので万が一のために更新系の共通カラムも。
退会は悲しい


ここからも訂正できるのね

記号だらけやるぞ～ !&quot\;#$%&amp\;&#x27\;()0\=~|&#x60\;\{*\}+&lt\;&gt\;?:\;:@\}[/**@@@~\=\=\=\=\\\||
                        ; databaseComment = 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在し、"1&nbsp\;:&nbsp\;0..1"&nbsp\;のパターンの&nbsp\;one-to-one&nbsp\;である。
共通カラムがあってバージョンNOがないパターン。
基本的に更新は入らないが、重要なデータなので万が一のために更新系の共通カラムも。
                        ; pieceCode = dd77d24b
                        ; pieceOwner = jflute
                        ; pieceDatetime = 2017-12-31T16:23:39.925
                        ; previousPieceList = list:{
                            ; f9bd326
                        }
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; tominaga
                            ; yuto
                            ; jflute
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = MEMBER_STATUS
                ; propertyList = list:{
                    ; map:{
                        ; decomment = 会員のステータスを示す固定的なマスタテーブル。いわゆるテーブル区分値！
業務運用上で増えることはなく、増減するときはプログラム修正ともなうレベルの業務変更と考えられる。

こういった固定的なマスタテーブルには、更新日時などの共通カラムは定義していないが、業務上そういった情報を管理する必要性が低いという理由に加え、ExampleDBとして共通カラムでER図が埋め尽くされてしまい見づらくなるというところで割り切っている。実業務では統一的に定義することもある。
                        ; databaseComment = 会員のステータスを示す固定的なマスタテーブル。いわゆるテーブル区分値！
業務運用上で増えることはなく、増減するときはプログラム修正ともなうレベルの業務変更と考えられる。

こういった固定的なマスタテーブルには、更新日時などの共通カラムは定義していないが、業務上そういった情報を管理する必要性が低いという理由に加え、ExampleDBとして共通カラムでER図が埋め尽くされてしまい見づらくなるというところで割り切っている。実業務では統一的に定義することもある。
                        ; pieceCode = 1d1af0e7
                        ; pieceOwner = tominaga
                        ; pieceDatetime = 2017-12-29T18:48:35.348
                        ; previousPieceList = list:{}
                        ; commentVersion = 0
                        ; authorList = list:{
                            ; tominaga
                        }
                    }
                }
                ; columnList = list:{}
            }
            ; map:{
                ; tableName = PURCHASE_PAYMENT
                ; propertyList = list:{}
                ; columnList = list:{
                    ; map:{
                        ; columnName = PAYMENT_DATETIME
                        ; propertyList = list:{
                            ; map:{
                                ; decomment = 支払ったときの日時
この辺だったらバレないんじゃないか、コード貼り付けてやるウヒヒ
/*
 * Copyright 2014-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the &quot\;License&quot\;)\;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &quot\;AS IS&quot\; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package org.dbflute.intro.app.web.document.decomment\;

import java.time.LocalDateTime\;
import java.util.ArrayList\;
import java.util.LinkedHashSet\;
import java.util.Set\;

import javax.annotation.Resource\;

import org.apache.commons.lang3.StringUtils\;
import org.dbflute.infra.doc.decomment.DfDecoMapPickup\;
import org.dbflute.infra.doc.decomment.DfDecoMapPiece\;
import org.dbflute.infra.doc.decomment.DfDecoMapPieceTargetType\;
import org.dbflute.intro.app.logic.document.decomment.DocumentDecommentPhysicalLogic\;
import org.dbflute.intro.app.web.base.IntroBaseAction\;
import org.dbflute.intro.mylasta.action.IntroMessages\;
import org.lastaflute.core.time.TimeManager\;
import org.lastaflute.core.util.LaStringUtil\;
import org.lastaflute.web.Execute\;
import org.lastaflute.web.response.JsonResponse\;

// done cabos decoment to decomment by jflute (2017/07/27)

/**
 * @author cabos
 * @author hakiba
 * @author deco
 */
public class DocumentDecommentAction extends IntroBaseAction \{

    // \=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=
    //                                                                           Attribute
    //                                                                           \=\=\=\=\=\=\=\=\=
    @Resource
    private TimeManager timeManager\;
    @Resource
    private DocumentDecommentPhysicalLogic decommentPhysicalLogic\;

    // done cabos use _taexec and use _tanest by jflute (2017/08/10)
    // \=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=
    //                                                                             Execute
    //                                                                             \=\=\=\=\=\=\=
    // -----------------------------------------------------
    //                                             Piece Map
    //                                             ---------
    // done cabos post to save, get to diff by jflute (2017/07/27)
    // done cabos javadoc with e.g. value by jflute (2017/09/28)
    /**
     * save decomment piece map
     *
     * @param projectName project name e.g. maihamadb (NotNull)
     * @param body decomment save body (NotNull)
     * @return void (NotNull)
     */
    @Execute(urlPattern \= &quot\;\{\}/@word&quot\;)
    public JsonResponse&lt\;Void&gt\; save(String projectName, DecommentSaveBody body) \{
        // done cabos validate columnName exists if target type is COLUMN in more validation by jflute (2017/11/11)
        // this is as client error so you can use verifyOrClientError(debugMsg, expectedBool)\;
        validate(body, messages -&gt\; moreValidate(body, messages))\;
        verifyOrClientError(buildDebugMessage(body), existsColumnNameIfTargetTypeColumn(body))\;
        decommentPhysicalLogic.saveDecommentPiece(projectName, mappingToDecoMapPiece(body))\;
        return JsonResponse.asEmptyBody()\;
    \}

    private void moreValidate(DecommentSaveBody body, IntroMessages messages) \{
        if (DfDecoMapPieceTargetType.Column \=\= body.targetType &amp\;&amp\; StringUtils.isEmpty(body.columnName)) \{
            messages.addConstraintsNotEmptyMessage(&quot\;columnName&quot\;)\;
        \}
    \}

    // done cabos unneeded public here, change to private by jflute (2017/11/12)
    private String buildDebugMessage(DecommentSaveBody body) \{
        StringBuilder sb \= new StringBuilder()\;
        sb.append(&quot\;If targetType is COLUMN, columnName must exists.&quot\;).append(&quot\;\n&quot\;)\;
        sb.append(&quot\;   targetType : &quot\;).append(body.targetType.code()).append(&quot\;\n&quot\;)\;
        sb.append(&quot\;   columnName : &quot\;).append(body.columnName).append(&quot\;\n&quot\;)\;
        return sb.toString()\;
    \}

    // done cabos change exist to exists for boolean expression by jflute (2017/11/12)
    private boolean existsColumnNameIfTargetTypeColumn(DecommentSaveBody body) \{
        return !(DfDecoMapPieceTargetType.Column \=\= body.targetType &amp\;&amp\; LaStringUtil.isEmpty(body.columnName))\;
    \}

    // done cabos use mappingTo... by jflute (2017/08/10)
    private DfDecoMapPiece mappingToDecoMapPiece(DecommentSaveBody body) \{
        // done cabos rename pieceMap to piece (can be simple here) by jflute (2017/11/11)
        String author \= getAuthor()\;
        Set&lt\;String&gt\; authorSet \= new LinkedHashSet&lt\;&gt\;(body.authors)\;
        authorSet.add(author)\;
        LocalDateTime pieceDatetime \= timeManager.currentDateTime()\;
        DfDecoMapPiece piece \= new DfDecoMapPiece(DfDecoMapPiece.DEFAULT_FORMAT_VERSION, body.tableName, body.columnName, body.targetType,
                body.decomment, body.databaseComment, body.commentVersion, new ArrayList&lt\;&gt\;(authorSet),
                buildPieceCode(body, pieceDatetime, author), pieceDatetime, author, body.previousPieces)\;
        return piece\;
    \}

    private String getAuthor() \{
        return decommentPhysicalLogic.getAuthor()\;
    \}

    private String buildPieceCode(DecommentSaveBody body, LocalDateTime pieceDateTime, String author) \{
        // done (by cabos) deco use tableName, columnName, date-time, owner by jflute (2017/11/11)
        StringBuilder sb \= new StringBuilder()\;
        sb.append(body.tableName)\;
        sb.append(&quot\;:&quot\;).append(body.columnName !\= null ? body.columnName : &quot\;&quot\;)\;
        sb.append(&quot\;:&quot\;).append(body.targetType)\;
        sb.append(&quot\;:&quot\;).append(pieceDateTime)\;
        sb.append(&quot\;:&quot\;).append(author)\;
        return Integer.toHexString(sb.toString().hashCode())\;
    \}

    // -----------------------------------------------------
    //                                            Pickup Map
    //                                            ----------
    // done hakiba rename piece to pickup by jflute (2017/08/17)
    /**
     * save decomment piece map
     *
     * @param projectName project name e.g. maihamadb (NotNull)
     * @return merged pickup as json (NotNull)
     */
    @Execute(urlPattern \= &quot\;\{\}/@word&quot\;)
    public JsonResponse&lt\;DecommentPickupResult&gt\; pickup(String projectName) \{
        DfDecoMapPickup dfDecoMapPickup \= decommentPhysicalLogic.readMergedPickup(projectName)\;
        return asJson(new DecommentPickupResult(dfDecoMapPickup.getTableList()))\;
    \}
\}
                                ; databaseComment = 支払ったときの日時
                                ; pieceCode = 665c2ae4
                                ; pieceOwner = jflute
                                ; pieceDatetime = 2017-12-31T16:13:12.641
                                ; previousPieceList = list:{}
                                ; commentVersion = 0
                                ; authorList = list:{
                                    ; jflute
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}